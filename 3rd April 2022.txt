Q.1 ) https://leetcode.com/problems/majority-element/

     public class FindMajorityElement {

	public static void main(String[] args) {
		int[] arr = {2,2,1,1,1,2,2};
		System.out.println(majorityElement(arr));
	}
	static int majorityElement(int nums[])  
	{  
	    int count1= 0;  
	    int index = -1;
	    for(int i = 0; i < nums.length; i++)  
	    {  
	        int count2 = 0;  
	        for(int j = 0; j < nums.length; j++)  
	        {  
	            if(nums[i] == nums[j])  
	            count2++;  
	        } 
	        if(count2 > count1)  
	        {  
	            count1 = count2;  
	            index = i;  
	        }  
            
	    } 
         if (count1 > nums.length/2) 
             return nums[index]; 
	     else
             return -1;
	    
	}
    

}
-------------------------------------------------***--------------------------------------------------

  
Q.2) https://leetcode.com/problems/valid-anagram/

     class Solution {
    public static boolean isAnagram(String s,String t){
	   
	    if(s.length() != t.length())
	      return false;
	    
	    int index;
	    for(int i=0; i<s.length(); i++){
	      
	      if((index = t.indexOf(s.charAt(i))) != -1){
	         
	          t= t.substring(0, index) + t.substring(index+1, t.length());
	      } else{
	        return false;
	      }
	    }
	    
	   
	    if(t.length() == 0)
	      return true;
	    else
	      return false;
	 
	  }

}



-------------------------------------------------***--------------------------------------------------
Q.3) https://leetcode.com/problems/sorting-the-sentence/

  class Solution {
    public String sortSentence(String s) {
        String[] str = s.split(" ");
        Arrays.sort(str, new Comparator<String>() {
           public int compare(String s1, String s2) {
               int ch1 = s1.charAt(s1.length()-1);
               int ch2 = s2.charAt(s2.length()-1);
               if(ch1 <= ch2) {
                   return -1;
               } else return 1;
           } 
        });
        StringBuilder sb = new StringBuilder();
        for(String e : str) {
            String temp = e.substring(0, e.length()-1);
            sb.append(temp + " ");
        }
        return sb.toString().trim();
    }
}



-------------------------------------------------***--------------------------------------------------
Q.4) Search for an element in the Circular Sorted Array.
     Ex- {12,15,2,4,7,9} 
     Search for 7"



     public class SearchElementInRotatedArray {

	public static void main(String[] args) {
		int[] arr = {12,15,2,4,7,9};
		int target = 7;
		int find = SearchElementInArray(arr, target);
		System.out.println(find);

	}

	private static int SearchElementInArray(int[] arr, int target) {
		
		int start = 0;
		int end = arr.length-1;
		while(start <= end) {
			int mid = start + (end - start) / 2;
			if(arr[mid] == target) {
				return mid;
			}
			 if(arr[mid]<=arr[end])
	            {
	                
	                if(target > arr[mid] && target <=arr[end])
	                {
	                    start=mid+1;
	                }
	                else
	                {
	                    end=mid-1;
	                }
	            }
	            else
	            {
	               
	                if(arr[start]<=target && target < arr[mid])
	                {
	                    end=mid-1;
	                }
	                else
	                {
	                    start=mid+1;
	                }
	            }
		}
		
		return -1;
		
		
	}

}






-------------------------------------------------***--------------------------------------------------