Q.1) Find the smallest missing element from a sorted array

     public class MissingNumberUsingBinarySearch {

	public static void main(String[] args) {
		
		int arr[] = {0,1,2,3,4,6,7,8,};
		
		int find = findMissingNumber(arr);
		System.out.println(find);
				
		}

	private static int findMissingNumber(int[] arr) {
		
		int start = 1;
		int end = arr.length-1;
		
		while(start<=end)
		{
			int mid = start + (end-start)/2;
			
			if(mid == 0)
			{
				return mid;
			}
			
			if(arr[mid]!=mid && arr[mid-1]==mid-1)
			{
				return mid;
			}
		
			else if(arr[mid]==mid)
			{
				start = mid +1;
			}
			else
			{
				end = mid -1;
			}
		}
		return arr.length;
	}
	

}

------------------------------------------------****-------------------------------------------------------
Q.2) Find the missing term in a sequence in logarithmic time"


    public class FindMissingTermInLogarithmic{
	
    public static int findMissingTerm(int[] arr){
    	
        int start = 0, end = arr.length - 1;
        int distance = (arr[arr.length-1] - arr[start]) / arr.length;
 
        while (start <= end)
        {
            int mid = start + (end - start) / 2;
 
            if (mid + 1 < arr.length && arr[mid + 1] - arr[mid] != distance) {
                return arr[mid + 1] - distance;
            }
 
            if (mid - 1 >= 0 && arr[mid] - arr[mid - 1] != distance) {
                return arr[mid - 1] +distance;
            }
 
            if (arr[mid] - arr[0] != (mid - 0) * distance) {
                end = mid - 1;
            }
 
            else {
                start = mid + 1;
            }
        }
        return -1;
    }
 
    public static void main(String[] args)
    {
        int[] arr = { 3, 5, 9, 11, 13, 15 };
        
        int find = findMissingTerm(arr);
        System.out.println(find);
    }
}

------------------------------------------------****-------------------------------------------------------