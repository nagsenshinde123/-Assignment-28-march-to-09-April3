Q.1)  WAP for searching a number using binary search. Return the index of the num if exists else return -2.

     public class QuestionFirst {

	public static void main(String[] args) {
		int arr[] = {28,29,45,48,75,79,85,95,99};
		int search = 85;
		int find = binarySearch(arr, search);
		System.out.println(find);

	}

	private static int binarySearch(int[] arr, int search) {
		int start = 0;
		int end = arr.length-1;
		while(start<=end) {
			int mid = start + (end - start) / 2;
			if(arr[mid] == search) {
				return mid;
			}
			if(arr[mid] < search) {
				start = mid + 1;
			}
			else {
				end = mid - 1;
			}
		}
		
		return -2;
	}

}



------------------------------------------------****-------------------------------------------------------
2. Find the cube root of a number using binary search


   public class CubeRoot {

	public static void main(String[] args) {
		
		int num = 125;
		int find = cubeRoot(num);
		System.out.println(find);

	}

	private static int cubeRoot(int num) {
		int start = 1;
		int end =num;
		int ans = 0;
		while(start<=end) {
			int mid = start + (end - start) / 2;
			if(mid * mid * mid == num) {
				return mid;
			}
			if(mid * mid * mid < num) {
				start = mid + 1;
				ans = mid;
			}
			else {
				end = mid - 1;
			}
		}
		
		return ans;
	}

}


------------------------------------------------****-------------------------------------------------------
3. Find the intersection elements of two sorted arrays
A[] = { 3,6,8}   B[] ={1,2,3,5,6,90,789}
Output = 3,6"

  public class FindIntersectionOfTwoArrays {

	public static void main(String[] args) {
		int[] arr1 = { 3,6,8} ;  
		int[] arr2 ={1,2,3,5,6,90,789};
		
		if(arr1.length > arr2.length) {
			for(int i=0; i<arr2.length; i++) {
				int index = binarySearch(arr1,arr2[i]);
				
				if(index != -1) {
					System.out.print(arr2[i]+" ");
				}
			}
		}
		else {
			for(int i=0; i<arr1.length; i++) {
				int index = binarySearch(arr2, arr1[i]);
				
				if(index != -1) {
					System.out.print(arr1[i]+" ");
				}
			}
		}

	}
	public static int binarySearch(int[] arr, int target) {
		
		int start = 0;
		int end = arr.length-1;
		while(start <= end) {
			int mid = start + (end - start)/2;
			if(arr[mid] == target) {
				return mid;
			}
			if(arr[mid] < target) {
				start = mid + 1;
			}
			else {
				end = mid - 1;
			}
		}
		return -1;
		
	}

}


------------------------------------------------****-------------------------------------------------------